#!/usr/bin/python3
#	babysize - Compare infant/toddler sizes against WHO standards
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of babysize.
#
#	babysize is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	babysize is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with babysize; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import requests
import json
import datetime
import sys

chart_type_desc = {
	"lhfa":		"Length/height for age",
	"wfa":		"Weight for age",
	"bfa":		"Body mass index for age",
	"hcfa":		"Head circumference for age",
	"acfa":		"Arm circumference for age",
	"ssfa":		"Subscapular skinfold for age",
	"tsfa":		"Triceps skinfold for age",
}
chart_set = {
	"hcfa":		"second_set/",
	"acfa":		"second_set/",
	"ssfa":		"second_set/",
	"tsfa":		"second_set/",
}

data_content_desc = {
	"z":		"Z-Scores",
	"p":		"Percentiles",
}

session = requests.Session()
for chart_type in chart_type_desc.keys():
	for gender in [ "boys", "girls" ]:
		for data_content in data_content_desc.keys():
			basename = "%s_%s_%s_exp.txt" % (chart_type, gender, data_content)
			uri = "https://www.who.int/childgrowth/standards/%s%s" % (chart_set.get(chart_type, ""), basename)
			if not os.path.exists(basename):
				response = session.get(uri)
				if response.status_code != 200:
					print("Error:", uri)
				else:
					with open(basename, "wb") as f:
						f.write(response.content)

def parse_percentiles(lines):
	result = {
		"percentiles":	[ 0.1, 1, 3, 5, 10, 15, 25, 50, 75, 85, 90, 95, 97, 99, 99.9 ],
		"data": [ ],
	}
	for (lineno, line) in enumerate(lines, 1):
		splitline = line.split("\t")
		if lineno == 1:
			if (splitline != ["Day", "L", "M", "S", "P01", "P1", "P3", "P5", "P10", "P15", "P25", "P50", "P75", "P85", "P90", "P95", "P97", "P99", "P999"])	and (splitline != ["Age", "L", "M", "S", "P01", "P1", "P3", "P5", "P10", "P15", "P25", "P50", "P75", "P85", "P90", "P95", "P97", "P99", "P999"]):
				raise NotImplementedError(str(splitline))
		else:
			result["data"].append({
				"day":			int(splitline[0]),
				"LMS":			[ float(value) for value in splitline[1 : 4] ],
				"percentiles":	[ float(value) for value in splitline[4 : 4 + 15] ],
			})
	result["data"].sort(key = lambda pt: pt["day"])
	return result

def parse_zscore(lines):
	result = {
		"sigma": [ -4, -3, -2, -1, 0, 1, 2, 3, 4 ],
		"data": [ ],
	}
	for (lineno, line) in enumerate(lines, 1):
		splitline = line.split("\t")
		if lineno == 1:
			if splitline != ["Day", "SD4neg", "SD3neg", "SD2neg", "SD1neg", "SD0", "SD1", "SD2", "SD3", "SD4"]:
				raise NotImplementedError(str(splitline))
		else:
			result["data"].append({
				"day":		int(splitline[0]),
				"sigma":	[ float(value) for value in splitline[1 : 1 + 9] ],
			})
	result["data"].sort(key = lambda pt: pt["day"])
	return result

data_set = {
	"meta": {
		"created_ts":	datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
	},
	"m": { },
	"f": { },
}
if os.path.isfile("who_data.json"):
	print("JSON output file already exists, not overwriting.")
	sys.exit(1)

for chart_type in chart_type_desc.keys():
	for gender in [ "boys", "girls" ]:
		for data_content in data_content_desc.keys():
			txt_file = "%s_%s_%s_exp.txt" % (chart_type, gender, data_content)
			if os.path.isfile(txt_file):
				with open(txt_file) as f:
					txt_data = f.read()
				lines = txt_data.strip().split("\n")

				mf = {
					"boys":		"m",
					"girls":	"f",
				}[gender]
				if not chart_type in data_set[mf]:
					data_set[mf][chart_type] = { }

				content = {
					"p":		"percentiles",
					"z":		"zscore",
				}[data_content]

				if content == "percentiles":
					new_data_subset = parse_percentiles(lines)
				elif content == "zscore":
					new_data_subset = parse_zscore(lines)
				else:
					raise NotImplementedError(content)
				new_data_subset["desc"] = chart_type_desc[chart_type]
				new_data_subset["content"] = data_content_desc[data_content]
				data_set[mf][chart_type][content] = new_data_subset

with open("who_data.json", "w") as f:
	json.dump(data_set, f)
